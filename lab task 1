// creat an integer array of size n and display it take value of the n from the user also the elemnet of the array
// insert an elemsnt into array at biggining , end ,  at specific position
//  perform delete operation 1 , last , at specific position
// search an element in the array (liner search)
// sorting
// sort only array element only at index even
// sort only array element only at index odd
// sort the element which are even
// sort the elemnt which are odd
Below is the C program are

#include <stdio.h>
#include <stdlib.h>

void displayArray(int arr[], int size) {
    printf("Array elements: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

void insertAtBeginning(int arr[], int *size, int element) {
    for (int i = *size; i > 0; i--) {
        arr[i] = arr[i - 1];
    }
    arr[0] = element;
    (*size)++;
}

void insertAtEnd(int arr[], int *size, int element) {
    arr[*size] = element;
    (*size)++;
}

void insertAtPosition(int arr[], int *size, int element, int position) {
    if (position < 0 || position > *size) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = *size; i > position; i--) {
        arr[i] = arr[i - 1];
    }
    arr[position] = element;
    (*size)++;
}

void deleteFirst(int arr[], int *size) {
    if (*size == 0) {
        printf("Array is empty!\n");
        return;
    }
    for (int i = 0; i < *size - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (*size)--;
}

void deleteLast(int arr[], int *size) {
    if (*size == 0) {
        printf("Array is empty!\n");
        return;
    }
    (*size)--;
}

void deleteAtPosition(int arr[], int *size, int position) {
    if (position < 0 || position >= *size) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = position; i < *size - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (*size)--;
}

int linearSearch(int arr[], int size, int element) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == element) {
            return i;
        }
    }
    return -1;
}

void sortArray(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void sortEvenIndices(int arr[], int size) {
    for (int i = 0; i < size; i += 2) {
        for (int j = i + 2; j < size; j += 2) {
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

void sortOddIndices(int arr[], int size) {
    for (int i = 1; i < size; i += 2) {
        for (int j = i + 2; j < size; j += 2) {
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

void sortEvenElements(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        if (arr[i] % 2 == 0) {
            for (int j = i + 1; j < size; j++) {
                if (arr[j] % 2 == 0 && arr[i] > arr[j]) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }
}

void sortOddElements(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        if (arr[i] % 2 != 0) {
            for (int j = i + 1; j < size; j++) {
                if (arr[j] % 2 != 0 && arr[i] > arr[j]) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }
}

int main() {
    int n, choice, element, position;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[100]; // Maximum size of the array
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    while (1) {
        printf("\nMenu:\n");
        printf("1. Display Array\n");
        printf("2. Insert at Beginning\n");
        printf("3. Insert at End\n");
        printf("4. Insert at Specific Position\n");
        printf("5. Delete First Element\n");
        printf("6. Delete Last Element\n");
        printf("7. Delete at Specific Position\n");
        printf("8. Search an Element\n");
        printf("9. Sort Entire Array\n");
        printf("10. Sort Elements at Even Indices\n");
        printf("11. Sort Elements at Odd Indices\n");
        printf("12. Sort Even Elements\n");
        printf("13. Sort Odd Elements\n");
        printf("14. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                displayArray(arr, n);
                break;
            case 2:
                printf("Enter element to insert at beginning: ");
                scanf("%d", &element);
                insertAtBeginning(arr, &n, element);
                break;
            case 3:
                printf("Enter element to insert at end: ");
                scanf("%d", &element);
                insertAtEnd(arr, &n, element);
                break;
            case 4:
                printf("Enter element to insert: ");
                scanf("%d", &element);
                printf("Enter position (0-based index): ");
                scanf("%d", &position);
                insertAtPosition(arr, &n, element, position);
                break;
            case 5:
                deleteFirst(arr, &n);
                break;
            case 6:
                deleteLast(arr, &n);
                break;
            case 7:
                printf("Enter position (0-based index): ");
                scanf("%d", &position);
                deleteAtPosition(arr, &n, position);
                break;
            case 8:
                printf("Enter element to search: ");
                scanf("%d", &element);
                position = linearSearch(arr, n, element);
                if (position != -1) {
                    printf("Element found at index %d\n", position);
                } else {
                    printf("Element not found!\n");
                }
                break;
            case 9:
                sortArray(arr, n);
                break;
            case 10:
                sortEvenIndices(arr, n);
                break;
            case 11:
                sortOddIndices(arr, n);
                break;
            case 12:
                sortEvenElements(arr, n);
                break;
            case 13:
                sortOddElements(arr, n);
                break;
            case 14:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }

    return 0;
}

